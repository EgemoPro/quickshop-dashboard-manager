
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ResponsiveContainer, LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Scatter, ScatterChart, ZAxis } from 'recharts';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useSelector } from 'react-redux';
import { RootState } from '@/store/store';
import { 
  LineChart as LineChartIcon, 
  BarChart3, 
  PieChart as PieChartIcon, 
  Download, 
  TrendingUp, 
  TrendingDown, 
  Layers,
  Calendar,
  Brain,
  AlertTriangle,
  ThumbsUp,
  UserCheck,
  ShoppingCart,
  Briefcase,
  Filter
} from 'lucide-react';

const AdvancedAnalytics = () => {
  const [timeRange, setTimeRange] = useState('3m');
  const [analysisType, setAnalysisType] = useState('predictive');
  const [showRecommendations, setShowRecommendations] = useState(true);
  const [confidenceThreshold, setConfidenceThreshold] = useState(80);
  
  const { salesData } = useSelector((state: RootState) => state.sales);
  const { topSellingProducts, channelPerformance } = useSelector((state: RootState) => state.stats);
  const { performanceIndicators } = useSelector((state: RootState) => state.strategy.storeStrategy);
  
  // COLORS for charts
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];
  
  // Sample data for predictive analytics (would come from ML models in production)
  const salesForecast = [
    { month: 'Jan', actual: 1200, forecast: 1300, lower: 1200, upper: 1400 },
    { month: 'Fév', actual: 1400, forecast: 1450, lower: 1350, upper: 1550 },
    { month: 'Mar', actual: 1300, forecast: 1400, lower: 1300, upper: 1500 },
    { month: 'Avr', actual: 1500, forecast: 1550, lower: 1450, upper: 1650 },
    { month: 'Mai', actual: 1700, forecast: 1800, lower: 1700, upper: 1900 },
    { month: 'Juin', actual: 1600, forecast: 1650, lower: 1550, upper: 1750 },
    { month: 'Juil', actual: null, forecast: 1750, lower: 1650, upper: 1850 },
    { month: 'Août', actual: null, forecast: 1850, lower: 1750, upper: 1950 },
    { month: 'Sept', actual: null, forecast: 1900, lower: 1800, upper: 2000 }
  ];
  
  const customerSegments = [
    { x: 85, y: 120, z: 200, name: 'Fidèles premium' },
    { x: 65, y: 80, z: 150, name: 'Réguliers' },
    { x: 90, y: 40, z: 50, name: 'Occasionnels VIP' },
    { x: 50, y: 100, z: 180, name: 'Nouveaux actifs' },
    { x: 40, y: 30, z: 80, name: 'À risque' },
    { x: 20, y: 15, z: 30, name: 'Inactifs' }
  ];
  
  const productClusters = [
    { name: 'Cluster A', value: 35, description: 'Produits à forte marge et volume' },
    { name: 'Cluster B', value: 25, description: 'Produits de luxe à faible volume' },
    { name: 'Cluster C', value: 20, description: 'Produits populaires à marge moyenne' },
    { name: 'Cluster D', value: 15, description: 'Produits à prix d\'appel' },
    { name: 'Cluster E', value: 5, description: 'Produits en fin de vie' }
  ];
  
  // AI-driven insights (would be generated by ML models in production)
  const insights = [
    {
      id: 1,
      title: 'Opportunité de croissance',
      description: 'Augmentation de 25% des ventes dans la catégorie "Décoration" prévue pour le trimestre prochain',
      type: 'opportunity',
      confidenceScore: 85,
      impact: 'high',
      suggestedAction: 'Augmenter le stock et le marketing pour cette catégorie'
    },
    {
      id: 2,
      title: 'Alerte stock',
      description: 'Risque de rupture de stock pour 5 produits populaires dans les 2 semaines à venir',
      type: 'risk',
      confidenceScore: 92,
      impact: 'high',
      suggestedAction: 'Commander du stock supplémentaire immédiatement'
    },
    {
      id: 3,
      title: 'Segment client en déclin',
      description: 'Diminution de 12% des achats répétés dans le segment "Jeunes urbains"',
      type: 'risk',
      confidenceScore: 78,
      impact: 'medium',
      suggestedAction: 'Lancer une campagne de réengagement ciblée'
    },
    {
      id: 4,
      title: 'Performance marketing',
      description: 'Les publicités sur Instagram génèrent un ROI 35% supérieur à Facebook',
      type: 'opportunity',
      confidenceScore: 88,
      impact: 'medium',
      suggestedAction: 'Réallouer 20% du budget Facebook vers Instagram'
    }
  ].filter(insight => insight.confidenceScore >= confidenceThreshold);
  
  // Decision support recommendations
  const recommendations = [
    {
      area: 'Stocks',
      recommendation: 'Augmenter les stocks de 15% pour la catégorie "Décoration" avant la haute saison',
      expectedImpact: '+8% de ventes, -3% de ruptures de stock',
      confidenceScore: 85
    },
    {
      area: 'Prix',
      recommendation: 'Tester une augmentation de prix de 5% sur les produits premium',
      expectedImpact: '+3% de marge brute, impact minimal sur le volume',
      confidenceScore: 76
    },
    {
      area: 'Marketing',
      recommendation: 'Rediriger 30% du budget PPC vers les campagnes Instagram',
      expectedImpact: '+18% ROI sur les dépenses marketing',
      confidenceScore: 91
    }
  ].filter(rec => rec.confidenceScore >= confidenceThreshold);
  
  // Format large numbers with k suffix
  const formatYAxis = (num: number): string => {
    if (num >= 1000) {
      return (num / 1000).toString() + 'k';
    }
    return num.toString();
  };
  
  return (
    <Card>
      <CardHeader>
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <CardTitle className="text-xl flex items-center gap-2">
              <Brain className="h-5 w-5 text-primary" />
              Analyses Avancées & Aide à la Décision
            </CardTitle>
            <CardDescription>
              Analyses prédictives et recommandations basées sur l'intelligence artificielle
            </CardDescription>
          </div>
          <div className="flex gap-2">
            <Select value={timeRange} onValueChange={setTimeRange}>
              <SelectTrigger className="w-[150px]">
                <Calendar className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Période" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1m">1 mois</SelectItem>
                <SelectItem value="3m">3 mois</SelectItem>
                <SelectItem value="6m">6 mois</SelectItem>
                <SelectItem value="1y">1 an</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="outline" size="icon">
              <Download className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        <Tabs value={analysisType} onValueChange={setAnalysisType}>
          <TabsList className="grid grid-cols-3 mb-4">
            <TabsTrigger value="predictive" className="flex items-center gap-1">
              <TrendingUp className="h-4 w-4" />
              Prédictions
            </TabsTrigger>
            <TabsTrigger value="segmentation" className="flex items-center gap-1">
              <Layers className="h-4 w-4" />
              Segmentation
            </TabsTrigger>
            <TabsTrigger value="decision" className="flex items-center gap-1">
              <Brain className="h-4 w-4" />
              Aide à la Décision
            </TabsTrigger>
          </TabsList>
          
          <div className="border rounded-md p-4">
            <TabsContent value="predictive" className="mt-0">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium mb-4">Prévisions de Ventes</h3>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart
                        data={salesForecast}
                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis tickFormatter={formatYAxis} />
                        <Tooltip />
                        <Legend />
                        <Line 
                          type="monotone" 
                          dataKey="actual" 
                          stroke="#8884d8" 
                          name="Ventes réelles" 
                          strokeWidth={2}
                          dot={{ r: 4 }}
                          activeDot={{ r: 6 }}
                        />
                        <Line 
                          type="monotone" 
                          dataKey="forecast" 
                          stroke="#82ca9d" 
                          name="Prévisions" 
                          strokeWidth={2}
                          strokeDasharray="5 5"
                        />
                        <Line 
                          type="monotone" 
                          dataKey="upper" 
                          stroke="#ccc" 
                          name="Limite haute" 
                          strokeDasharray="3 3"
                        />
                        <Line 
                          type="monotone" 
                          dataKey="lower" 
                          stroke="#ccc" 
                          name="Limite basse" 
                          strokeDasharray="3 3"
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Insights Clés</h3>
                  
                  {insights.map(insight => (
                    <Card key={insight.id} className="p-0 overflow-hidden">
                      <div className={`w-full h-1 ${insight.type === 'opportunity' ? 'bg-green-500' : 'bg-amber-500'}`} />
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between">
                          <div>
                            <h4 className="font-medium flex items-center gap-2">
                              {insight.type === 'opportunity' ? (
                                <ThumbsUp className="h-4 w-4 text-green-500" />
                              ) : (
                                <AlertTriangle className="h-4 w-4 text-amber-500" />
                              )}
                              {insight.title}
                            </h4>
                            <p className="text-sm text-gray-500 mt-1">{insight.description}</p>
                          </div>
                          <div className="text-sm font-medium bg-gray-100 px-2 py-1 rounded">
                            {insight.confidenceScore}% confiance
                          </div>
                        </div>
                        <div className="mt-3 flex items-center justify-between">
                          <div className="text-xs text-gray-500">
                            Impact: <span className="font-medium">{insight.impact === 'high' ? 'Élevé' : 'Moyen'}</span>
                          </div>
                          <div className="text-xs font-medium text-primary">
                            {insight.suggestedAction}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="segmentation" className="mt-0">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium mb-4">Segmentation Clients</h3>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <ScatterChart
                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis 
                          type="number" 
                          dataKey="x" 
                          name="Fidélité" 
                          unit="%" 
                          domain={[0, 100]}
                          label={{ value: 'Fidélité (%)', position: 'bottom', offset: 0 }}
                        />
                        <YAxis 
                          type="number" 
                          dataKey="y" 
                          name="Valeur" 
                          unit="€" 
                          label={{ value: 'Valeur (€)', angle: -90, position: 'insideLeft' }}
                        />
                        <ZAxis 
                          type="number" 
                          dataKey="z" 
                          range={[60, 400]} 
                          name="Volume" 
                          unit=" clients"
                        />
                        <Tooltip 
                          cursor={{ strokeDasharray: '3 3' }}
                          formatter={(value, name, props) => {
                            if (name === 'Fidélité') return [`${value}%`, name];
                            if (name === 'Valeur') return [`${value}€`, name];
                            return [`${value} clients`, 'Volume'];
                          }}
                          content={({active, payload}) => {
                            if (active && payload && payload.length) {
                              const data = payload[0].payload;
                              return (
                                <div className="bg-white border p-2 rounded shadow">
                                  <p className="font-medium">{data.name}</p>
                                  <p className="text-sm">{`Fidélité: ${data.x}%`}</p>
                                  <p className="text-sm">{`Valeur: ${data.y}€`}</p>
                                  <p className="text-sm">{`Volume: ${data.z} clients`}</p>
                                </div>
                              );
                            }
                            return null;
                          }}
                        />
                        <Scatter 
                          name="Segments clients" 
                          data={customerSegments} 
                          fill="#8884d8"
                        >
                          {customerSegments.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Scatter>
                      </ScatterChart>
                    </ResponsiveContainer>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-4">Clusters de Produits</h3>
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={productClusters}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          outerRadius={80}
                          fill="#8884d8"
                          dataKey="value"
                          label={({name, percent}) => `${name}: ${(percent * 100).toFixed(0)}%`}
                        >
                          {productClusters.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip 
                          formatter={(value) => [`${value}%`, 'Proportion']}
                          content={({active, payload}) => {
                            if (active && payload && payload.length) {
                              const data = payload[0].payload;
                              return (
                                <div className="bg-white border p-2 rounded shadow">
                                  <p className="font-medium">{data.name}</p>
                                  <p className="text-sm">{`${data.value}% du catalogue`}</p>
                                  <p className="text-sm text-gray-500">{data.description}</p>
                                </div>
                              );
                            }
                            return null;
                          }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                <Card className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="bg-blue-100 p-2 rounded-full">
                      <UserCheck className="h-5 w-5 text-blue-600" />
                    </div>
                    <div>
                      <h4 className="font-medium">Clients Fidèles</h4>
                      <p className="text-2xl font-bold">28%</p>
                      <p className="text-xs text-green-500">+3.2% depuis 3 mois</p>
                    </div>
                  </div>
                </Card>
                
                <Card className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="bg-green-100 p-2 rounded-full">
                      <ShoppingCart className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <h4 className="font-medium">Valeur Client Moy.</h4>
                      <p className="text-2xl font-bold">124€</p>
                      <p className="text-xs text-green-500">+5.7% depuis 3 mois</p>
                    </div>
                  </div>
                </Card>
                
                <Card className="p-4">
                  <div className="flex items-center gap-3">
                    <div className="bg-amber-100 p-2 rounded-full">
                      <Briefcase className="h-5 w-5 text-amber-600" />
                    </div>
                    <div>
                      <h4 className="font-medium">Produits Stars</h4>
                      <p className="text-2xl font-bold">12%</p>
                      <p className="text-xs text-gray-500">génèrent 45% des ventes</p>
                    </div>
                  </div>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="decision" className="mt-0">
              <div className="flex flex-col gap-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Recommandations Stratégiques</h3>
                  <div className="flex items-center gap-3">
                    <Label htmlFor="show-recommendations" className="text-sm">
                      Voir recommandations
                    </Label>
                    <Switch 
                      id="show-recommendations"
                      checked={showRecommendations}
                      onCheckedChange={setShowRecommendations}
                    />
                  </div>
                </div>
                
                {showRecommendations && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-4 mb-6">
                      <Label htmlFor="confidence" className="min-w-36">
                        Seuil de confiance: {confidenceThreshold}%
                      </Label>
                      <Slider 
                        id="confidence"
                        min={50}
                        max={95}
                        step={5}
                        value={[confidenceThreshold]}
                        onValueChange={(value) => setConfidenceThreshold(value[0])}
                        className="flex-1"
                      />
                    </div>
                    
                    {recommendations.length > 0 ? (
                      <div className="grid grid-cols-1 gap-4">
                        {recommendations.map((rec, index) => (
                          <Card key={index} className="overflow-hidden">
                            <div className="flex items-stretch">
                              <div 
                                className="w-2 flex-shrink-0" 
                                style={{ 
                                  backgroundColor: rec.confidenceScore > 85 
                                    ? '#10b981' 
                                    : rec.confidenceScore > 75 
                                    ? '#f59e0b' 
                                    : '#6366f1'
                                }}
                              />
                              <CardContent className="p-4 flex-grow">
                                <div className="flex justify-between items-start">
                                  <div>
                                    <div className="text-sm font-medium text-gray-500 mb-1">{rec.area}</div>
                                    <h4 className="font-medium">{rec.recommendation}</h4>
                                    <p className="text-sm text-green-600 mt-2">{rec.expectedImpact}</p>
                                  </div>
                                  <div className="text-sm font-medium bg-gray-100 px-2 py-1 rounded">
                                    {rec.confidenceScore}% confiance
                                  </div>
                                </div>
                              </CardContent>
                              <div className="flex items-center pr-4">
                                <Button variant="outline" size="sm">Appliquer</Button>
                              </div>
                            </div>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-6 text-gray-500">
                        Aucune recommandation avec le seuil de confiance actuel.
                        <br />
                        Essayez de réduire le seuil pour voir plus de suggestions.
                      </div>
                    )}
                  </div>
                )}
                
                <div>
                  <h3 className="text-lg font-medium mb-4">Simulateur d'Impact</h3>
                  <Card className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="price-change">Changement de prix (%)</Label>
                          <div className="flex items-center gap-2 mt-1">
                            <Input 
                              id="price-change" 
                              type="number" 
                              defaultValue="0" 
                              className="w-24" 
                            />
                            <Slider 
                              defaultValue={[0]} 
                              max={20} 
                              min={-20} 
                              step={1}
                              className="flex-1"
                            />
                          </div>
                        </div>
                        
                        <div>
                          <Label htmlFor="marketing-budget">Budget marketing (€)</Label>
                          <div className="flex items-center gap-2 mt-1">
                            <Input 
                              id="marketing-budget" 
                              type="number" 
                              defaultValue="1000" 
                              className="w-24" 
                            />
                            <Slider 
                              defaultValue={[1000]} 
                              max={5000} 
                              min={0} 
                              step={100}
                              className="flex-1"
                            />
                          </div>
                        </div>
                        
                        <div>
                          <Label htmlFor="new-products">Nouveaux produits</Label>
                          <div className="flex items-center gap-2 mt-1">
                            <Input 
                              id="new-products" 
                              type="number" 
                              defaultValue="0" 
                              className="w-24" 
                            />
                            <Slider 
                              defaultValue={[0]} 
                              max={20} 
                              min={0} 
                              step={1}
                              className="flex-1"
                            />
                          </div>
                        </div>
                        
                        <div className="flex justify-end mt-4">
                          <Button>Simuler</Button>
                        </div>
                      </div>
                      
                      <div className="border-t md:border-t-0 md:border-l pt-4 md:pt-0 md:pl-6">
                        <h4 className="font-medium mb-3">Impact Estimé</h4>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-sm">Revenus</span>
                            <span className="font-medium text-green-600">+12.5%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm">Marge</span>
                            <span className="font-medium text-green-600">+8.2%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm">Volume</span>
                            <span className="font-medium text-amber-600">-2.3%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm">ROI Marketing</span>
                            <span className="font-medium text-green-600">+15.7%</span>
                          </div>
                          <div className="pt-3 mt-3 border-t">
                            <div className="flex justify-between items-center">
                              <span className="font-medium">Impact global</span>
                              <span className="font-medium text-green-600">Positif</span>
                            </div>
                            <div className="text-xs text-gray-500 mt-1">
                              Confiance de la simulation: 82%
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
      </CardContent>
      <CardFooter className="flex justify-between">
        <div className="text-sm text-gray-500">
          *Les analyses prédictives utilisent des modèles statistiques avancés et l'apprentissage automatique
        </div>
        <Button variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Exporter Rapport
        </Button>
      </CardFooter>
    </Card>
  );
};

export default AdvancedAnalytics;
